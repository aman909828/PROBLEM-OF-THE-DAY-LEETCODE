#SOLUTION WITH O(N) SPACE COMPLEXITY
PLEASE UPVOTE if you like üòÅ If you have any question, feel free to ask.

# Intuition
Convert linked list to array/list and return random values from array/list
<!-- Describe your first thoughts on how to solve this problem. -->

# Approach
simply convert linked list into array/list
and then return random values from the array
<!-- Describe your approach to solving the problem. -->

# Complexity
- Time complexity:O(N)
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:O(N)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:

    def __init__(self, head: Optional[ListNode]):
        self.nodes=[]
        while head:
            self.nodes.append(head.val)
            head=head.next
        
    def getRandom(self) -> int:
        return self.nodes[randint(0,len(self.nodes)-1)]
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()
```


#SOLUTION WITH O(1) SPACE COMPLEXITY:-

PLEASE UPVOTE if you like üòÅ If you have any question, feel free to ask.
# Intuition
Reservoir Sampling Approach
<!-- Describe your first thoughts on how to solve this problem. -->

# Complexity
- Time complexity:O(N)
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:O(1)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:

    def __init__(self, head: Optional[ListNode]):
        self.head=head

    def getRandom(self) -> int:
        curr=self.head
        ans=0
        count=0
        while curr:
            if random.randint(0,count)==0:
                ans=curr.val
            curr=curr.next
            count+=1
        return ans
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()
```
