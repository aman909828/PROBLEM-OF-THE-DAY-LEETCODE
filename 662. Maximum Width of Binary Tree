# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        ans=0
        queue=[(root,0)]

        while len(queue)>0:
            n=len(queue)
            curr_min=queue[0][1]
            left,right=0,0
            for i in range(n):
                curr_id=queue[0][1]-curr_min
                node=queue[0][0]
                queue.pop(0)
                if i==0:
                    left=curr_id
                if i==n-1:
                    right=curr_id
                if node.left:
                    queue.append((node.left,(curr_id*2)+1))
                if node.right:
                    queue.append((node.right,(curr_id*2)+2))
            ans=max(ans,right-left+1)
        return ans
